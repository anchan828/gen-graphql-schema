// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenOrderTypesService should deep where 1`] = `
"type TestPosition {
  column: Int!
  line: Int!
  prev: TestPosition
  next: TestPosition
}

type TestSubPosition {
  column: Int!
  line: Int!
}

type Test {
  id: ID!
  position: TestPosition!
}

type Query {
  tests(orderBy: TestOrder): [Test]
}

\\"\\"\\"Sort the results in ascending or descending order\\"\\"\\"
enum OrderDirection {
  \\"\\"\\"Sort the results in ascending order\\"\\"\\"
  ASC

  \\"\\"\\"Sort the results in descending order\\"\\"\\"
  DESC
}

\\"\\"\\"Ordering options for TestPosition\\"\\"\\"
input TestPositionOrder {
  \\"\\"\\"Order TestPosition by column\\"\\"\\"
  column: OrderDirection

  \\"\\"\\"Order TestPosition by line\\"\\"\\"
  line: OrderDirection

  \\"\\"\\"Order TestPosition by prev\\"\\"\\"
  prev: TestPositionOrder
}

\\"\\"\\"Ordering options for Test\\"\\"\\"
input TestOrder {
  \\"\\"\\"Order Test by id\\"\\"\\"
  id: OrderDirection

  \\"\\"\\"Order Test by position\\"\\"\\"
  position: TestPositionOrder
}
"
`;

exports[`GenOrderTypesService should return added Order enum 1`] = `
"type Test {
  id: ID
  name: String
}

type Query {
  tests(arg: PrefixTestChanged): [[Test!]]!
}

\\"\\"\\"Sort the results in ascending or descending order\\"\\"\\"
enum Position {
  \\"\\"\\"Sort the results in ascending order\\"\\"\\"
  TOP

  \\"\\"\\"Sort the results in descending order\\"\\"\\"
  BOTTOM
}

\\"\\"\\"Ordering options for Test\\"\\"\\"
input PrefixTestChanged {
  \\"\\"\\"Order Test by id\\"\\"\\"
  id: Position
}
"
`;

exports[`GenOrderTypesService should return added Order enum when change options 1`] = `
"scalar Date

type Test {
  id: ID
  name: String
  date: Date
}

type Query {
  tests(arg: TestChanged): [Test]
}

\\"\\"\\"Sort the results in ascending or descending order\\"\\"\\"
enum OrderDirection {
  \\"\\"\\"Sort the results in ascending order\\"\\"\\"
  ASC

  \\"\\"\\"Sort the results in descending order\\"\\"\\"
  DESC
}

\\"\\"\\"Ordering options for Test\\"\\"\\"
input TestChanged {
  \\"\\"\\"Order Test by id\\"\\"\\"
  id: OrderDirection

  \\"\\"\\"Order Test by date\\"\\"\\"
  date: OrderDirection
}
"
`;

exports[`GenOrderTypesService should return added Order enum when has orderBy directive 1`] = `
"type Test {
  id: ID
}

type Query {
  tests(orderBy: TestOrder): [Test]
}

\\"\\"\\"Sort the results in ascending or descending order\\"\\"\\"
enum OrderDirection {
  \\"\\"\\"Sort the results in ascending order\\"\\"\\"
  ASC

  \\"\\"\\"Sort the results in descending order\\"\\"\\"
  DESC
}

\\"\\"\\"Ordering options for Test\\"\\"\\"
input TestOrder {
  \\"\\"\\"Order Test by id\\"\\"\\"
  id: OrderDirection
}
"
`;

exports[`GenOrderTypesService should support union type 1`] = `
"type Test1 {
  id: ID
  name: String!
}

type Test2 {
  id: ID
  age: Int!
}

union Test = Test1 | Test2

type Query {
  tests(orderBy: TestOrder): [Test]
}

\\"\\"\\"Sort the results in ascending or descending order\\"\\"\\"
enum OrderDirection {
  \\"\\"\\"Sort the results in ascending order\\"\\"\\"
  ASC

  \\"\\"\\"Sort the results in descending order\\"\\"\\"
  DESC
}

\\"\\"\\"Ordering options for Test\\"\\"\\"
input TestOrder {
  \\"\\"\\"Order Test by id\\"\\"\\"
  id: OrderDirection

  \\"\\"\\"Order Test by name\\"\\"\\"
  name: OrderDirection

  \\"\\"\\"Order Test by age\\"\\"\\"
  age: OrderDirection
}
"
`;
