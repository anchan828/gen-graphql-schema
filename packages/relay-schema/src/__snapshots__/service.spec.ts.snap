// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenRelayTypesService should return added Where types when has union type 1`] = `
"\\"\\"\\"A connection for relay\\"\\"\\"
interface Connection {
  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [Edge]
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
interface Edge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String
}

\\"\\"\\"An object with an ID.\\"\\"\\"
interface Node {
  \\"\\"\\"ID of the object.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean
}

type Query {
  tests(before: String, after: String, first: Int, last: Int): TestConnection!
  tests2(before: String, after: String, first: Int, last: Int): TestConnection!
}

union Test = Test1 | Test2

type Test1 implements Node {
  id: ID!
  name: String!
}

type Test2 implements Node {
  id: ID!
  age: Int!
}

\\"\\"\\"The connection type for Test\\"\\"\\"
type TestConnection implements Connection {
  \\"\\"\\"Identifies the total count of Test items in the connection.\\"\\"\\"
  totalCount: Int

  \\"\\"\\"A list of TestEdge.\\"\\"\\"
  edges: [TestEdge]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!
}

\\"\\"\\"An edge in a TestConnection.\\"\\"\\"
type TestEdge implements Edge {
  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: Test!

  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String
}
"
`;

exports[`GenRelayTypesService should return added Where types when has where directive 1`] = `
"\\"\\"\\"A connection for relay\\"\\"\\"
interface Connection {
  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [Edge]
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
interface Edge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String
}

\\"\\"\\"An object with an ID.\\"\\"\\"
interface Node {
  \\"\\"\\"ID of the object.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean
}

type Query {
  tests(before: String, after: String, first: Int, last: Int): TestConnection!
  tests2(before: String, after: String, first: Int, last: Int): TestConnection!
}

type Test implements Node {
  id: ID!
}

\\"\\"\\"The connection type for Test\\"\\"\\"
type TestConnection implements Connection {
  \\"\\"\\"Identifies the total count of Test items in the connection.\\"\\"\\"
  totalCount: Int

  \\"\\"\\"A list of TestEdge.\\"\\"\\"
  edges: [TestEdge]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!
}

\\"\\"\\"An edge in a TestConnection.\\"\\"\\"
type TestEdge implements Edge {
  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: Test!

  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String
}
"
`;
