// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenWhereTypesService should apply where_eq_only directive 1`] = `
"type Test {
  id: ID!
  name: String!
}

type Query {
  tests(where: TestWhere): [Test]
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input TestWhere {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: IDWhereOperator

  \\"\\"\\"Query with using name field\\"\\"\\"
  OR: [TestWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean

  \\"\\"\\"Query with using name field\\"\\"\\"
  name: String
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input IDWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;

exports[`GenWhereTypesService should deep where 1`] = `
"type TestPosition {
  column: Int!
  line: Int!
  array: [Int!]
  prev: TestPosition
  next: TestPosition
}

type Test {
  id: ID!
  position: TestPosition!
}

type Query {
  tests(where: TestWhere): [Test]
}

\\"\\"\\"Query of TestPosition with using operators\\"\\"\\"
input TestPositionWhere {
  \\"\\"\\"Query with using column field\\"\\"\\"
  column: IntWhereOperator

  \\"\\"\\"Query with using next field\\"\\"\\"
  OR: [TestPositionWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean

  \\"\\"\\"Query with using line field\\"\\"\\"
  line: IntWhereOperator

  \\"\\"\\"Query with using array field\\"\\"\\"
  array: IntWhereOperator

  \\"\\"\\"Query with using prev field\\"\\"\\"
  prev: TestPositionWhere

  \\"\\"\\"Query with using next field\\"\\"\\"
  next: TestPositionWhere
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input TestWhere {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: IDWhereOperator

  \\"\\"\\"Query with using position field\\"\\"\\"
  OR: [TestWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean

  \\"\\"\\"Query with using position field\\"\\"\\"
  position: TestPositionWhere
}

\\"\\"\\"Query type of Int with using operators\\"\\"\\"
input IntWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: Int

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: Int

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [Int]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [Int]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: Int

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: Int

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: Int

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: Int

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [Int]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input IDWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;

exports[`GenWhereTypesService should return added Where types when has custom directive 1`] = `
"type Test {
  id: ID!
  name: String
}

type Query {
  tests(Hoge: PreWhereTypeTestSufWhereType): [Test]
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input PreWhereTypeTestSufWhereType {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: PreOperatorIDSufOperator

  \\"\\"\\"Query with using id field\\"\\"\\"
  OR: [PreWhereTypeTestSufWhereType]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input PreOperatorIDSufOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;

exports[`GenWhereTypesService should return added Where types when has union type and where directive 1`] = `
"type Test1 {
  id: ID
  name: String!
}

type Test2 {
  id: ID
  age: Int!
}

union Test = Test1 | Test2

type Query {
  tests(where: TestWhere): [Test]
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input TestWhere {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: IDWhereOperator

  \\"\\"\\"Query with using age field\\"\\"\\"
  OR: [TestWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean

  \\"\\"\\"Query with using name field\\"\\"\\"
  name: StringWhereOperator

  \\"\\"\\"Query with using age field\\"\\"\\"
  age: IntWhereOperator
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input IDWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of String with using operators\\"\\"\\"
input StringWhereOperator {
  \\"\\"\\"Must match the string starts with the given data exactly\\"\\"\\"
  starts_with: String

  \\"\\"\\"Must match the string ends with the given data exactly\\"\\"\\"
  ends_with: String

  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: String

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: String

  \\"\\"\\"
  Determines whether the given string may be found within another string.
  \\"\\"\\"
  contains: String

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [String]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [String]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of Int with using operators\\"\\"\\"
input IntWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: Int

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: Int

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [Int]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [Int]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: Int

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: Int

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: Int

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: Int

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [Int]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;

exports[`GenWhereTypesService should return added Where types when has where directive 1`] = `
"scalar Date

enum TestEnum {
  A
  B
}

type Test {
  id: ID!
  name: String!
  texts: [String]
  age: Int
  age2: Int
  created_At: Date
  range: Float
  published: Boolean
  test: TestEnum
  test2: [TestEnum]
}

type Query {
  tests(where: TestWhere): [Test]
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input TestWhere {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: IDWhereOperator

  \\"\\"\\"Query with using test2 field\\"\\"\\"
  OR: [TestWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean

  \\"\\"\\"Query with using name field\\"\\"\\"
  name: StringWhereOperator

  \\"\\"\\"Query with using texts field\\"\\"\\"
  texts: StringWhereOperator

  \\"\\"\\"Query with using age field\\"\\"\\"
  age: IntWhereOperator

  \\"\\"\\"Query with using created_At field\\"\\"\\"
  created_At: DateWhereOperator

  \\"\\"\\"Query with using range field\\"\\"\\"
  range: FloatWhereOperator

  \\"\\"\\"Query with using published field\\"\\"\\"
  published: Boolean

  \\"\\"\\"Query with using test field\\"\\"\\"
  test: TestEnumWhereOperator

  \\"\\"\\"Query with using test2 field\\"\\"\\"
  test2: TestEnumWhereOperator
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input IDWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of String with using operators\\"\\"\\"
input StringWhereOperator {
  \\"\\"\\"Must match the string starts with the given data exactly\\"\\"\\"
  starts_with: String

  \\"\\"\\"Must match the string ends with the given data exactly\\"\\"\\"
  ends_with: String

  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: String

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: String

  \\"\\"\\"
  Determines whether the given string may be found within another string.
  \\"\\"\\"
  contains: String

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [String]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [String]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of Int with using operators\\"\\"\\"
input IntWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: Int

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: Int

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [Int]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [Int]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: Int

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: Int

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: Int

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: Int

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [Int]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of Date with using operators\\"\\"\\"
input DateWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: Date

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: Date

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [Date]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [Date]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: Date

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: Date

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: Date

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: Date
}

\\"\\"\\"Query type of Float with using operators\\"\\"\\"
input FloatWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: Float

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: Float

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [Float]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [Float]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: Float

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: Float

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: Float

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: Float

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [Float]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}

\\"\\"\\"Query type of TestEnum with using operators\\"\\"\\"
input TestEnumWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: TestEnum

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: TestEnum

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [TestEnum]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [TestEnum]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;

exports[`GenWhereTypesService should return basic where 1`] = `
"type Test {
  id: ID
}

type Query {
  tests(where: TestWhere): [Test]
}

\\"\\"\\"Query of Test with using operators\\"\\"\\"
input TestWhere {
  \\"\\"\\"Query with using id field\\"\\"\\"
  id: IDWhereOperator

  \\"\\"\\"Query with using id field\\"\\"\\"
  OR: [TestWhere]

  \\"\\"\\"Must be the object present\\"\\"\\"
  PRESENT: Boolean
}

\\"\\"\\"Query type of ID with using operators\\"\\"\\"
input IDWhereOperator {
  \\"\\"\\"Must match the given data exactly\\"\\"\\"
  eq: ID

  \\"\\"\\"Must be different from the given data\\"\\"\\"
  not_eq: ID

  \\"\\"\\"Must be an element of the array\\"\\"\\"
  in: [ID]

  \\"\\"\\"Must not be an element of the array\\"\\"\\"
  not_in: [ID]

  \\"\\"\\"Must be less than given value\\"\\"\\"
  lt: ID

  \\"\\"\\"Must be less than or equal to given value\\"\\"\\"
  lte: ID

  \\"\\"\\"Must be greater than given value\\"\\"\\"
  gt: ID

  \\"\\"\\"Must be greater than or equal to given value\\"\\"\\"
  gte: ID

  \\"\\"\\"Must be within the given range\\"\\"\\"
  between: [ID]

  \\"\\"\\"Must be the object present\\"\\"\\"
  present: Boolean
}
"
`;
