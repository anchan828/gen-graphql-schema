// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mergeTypes should have interface 1`] = `
"interface Node {
  id: ID
}
type Test implements Node & Interface {
  id: ID
}
interface Interface {
  id: ID
}
type Query

"
`;

exports[`mergeTypes should merge descriptions 1`] = `
"\\"\\"\\"
Test
NewLine
\\"\\"\\"
type Test {
  \\"\\"\\"id descrip\\"\\"\\"
  id: ID
  \\"\\"\\"name descrip\\"\\"\\"
  name: ID
}
type Query

"
`;

exports[`mergeTypes should merge types 1`] = `
"\\"\\"\\"Test\\"\\"\\"
type Test {
  id: ID
}
type Test2 {
  id: ID
}
type Query

"
`;

exports[`mergeTypes should work orderBy directive 1`] = `
"type Test {
  id: ID
}
type Test2 {
  tests(orderBy: TestOrder): [Test]
}
type Query
\\"Sort the results in ascending or descending order\\"
enum OrderDirection {
  \\"Sort the results in ascending order\\"
  ASC
  \\"Sort the results in descending order\\"
  DESC
}
\\"Ordering options for Test\\"
input TestOrder {
  \\"Order Test by id\\"
  id: OrderDirection
}

"
`;

exports[`mergeTypes should work orderBy, where, and relay directive 1`] = `
"type Test1 implements Node {
  id: ID
  name: String!
}
type Test2 implements Node {
  id: ID
  age: Int!
}
union Test = Test1 | Test2
type Test3 {
  tests(orderBy: TestOrder, where: TestWhere, before: String, after: String, first: Int, last: Int): TestConnection!
}
type Query
\\"Sort the results in ascending or descending order\\"
enum OrderDirection {
  \\"Sort the results in ascending order\\"
  ASC
  \\"Sort the results in descending order\\"
  DESC
}
\\"Ordering options for Test\\"
input TestOrder {
  \\"Order Test by id\\"
  id: OrderDirection
  \\"Order Test by name\\"
  name: OrderDirection
  \\"Order Test by age\\"
  age: OrderDirection
}
\\"Query of Test with using operators\\"
input TestWhere {
  \\"Query with using id field\\"
  id: IDWhereOperator
  \\"Query with using age field\\"
  OR: [TestWhere]
  \\"Query with using name field\\"
  name: StringWhereOperator
  \\"Query with using age field\\"
  age: IntWhereOperator
}
\\"Query type of ID with using operators\\"
input IDWhereOperator {
  \\"Must match the given data exactly\\"
  eq: ID
  \\"Must be different from the given data\\"
  not_eq: ID
  \\"Must be an element of the array\\"
  in: [ID]
  \\"Must not be an element of the array\\"
  not_in: [ID]
  \\"Must be less than given value\\"
  lt: ID
  \\"Must be less than or equal to given value\\"
  lte: ID
  \\"Must be greater than given value\\"
  gt: ID
  \\"Must be greater than or equal to given value\\"
  gte: ID
  \\"Must be within the given range\\"
  between: [ID]
}
\\"Query type of String with using operators\\"
input StringWhereOperator {
  \\"Must match the string starts with the given data exactly\\"
  starts_with: String
  \\"Must match the string ends with the given data exactly\\"
  ends_with: String
  \\"Must match the given data exactly\\"
  eq: String
  \\"Must be different from the given data\\"
  not_eq: String
  \\"Determines whether the given string may be found within another string.\\"
  contains: String
  \\"Must be an element of the array\\"
  in: [String]
  \\"Must not be an element of the array\\"
  not_in: [String]
}
\\"Query type of Int with using operators\\"
input IntWhereOperator {
  \\"Must match the given data exactly\\"
  eq: Int
  \\"Must be different from the given data\\"
  not_eq: Int
  \\"Must be an element of the array\\"
  in: [Int]
  \\"Must not be an element of the array\\"
  not_in: [Int]
  \\"Must be less than given value\\"
  lt: Int
  \\"Must be less than or equal to given value\\"
  lte: Int
  \\"Must be greater than given value\\"
  gt: Int
  \\"Must be greater than or equal to given value\\"
  gte: Int
  \\"Must be within the given range\\"
  between: [Int]
}
\\"An object with an ID.\\"
interface Node {
  \\"ID of the object.\\"
  id: ID!
}
\\"An edge in a connection.\\"
interface Edge {
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"A connection for relay\\"
interface Connection {
  \\"Identifies the total count of items in the connection.\\"
  totalCount: Int
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
  \\"A list of edges.\\"
  edges: [Edge]
}
\\"Information about pagination in a connection.\\"
type PageInfo {
  \\"When paginating backwards, the cursor to continue.\\"
  startCursor: String
  \\"When paginating forwards, the cursor to continue.\\"
  endCursor: String
  \\"When paginating forwards, are there more items?\\"
  hasNextPage: Boolean
  \\"When paginating backwards, are there more items?\\"
  hasPreviousPage: Boolean
}
\\"An edge in a TestConnection.\\"
type TestEdge implements Edge {
  \\"The item at the end of the edge.\\"
  node: Test!
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"The connection type for Test\\"
type TestConnection implements Connection {
  \\"Identifies the total count of Test items in the connection.\\"
  totalCount: Int
  \\"A list of TestEdge.\\"
  edges: [TestEdge]
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
}

"
`;

exports[`mergeTypes should work orderBy, where, and relay directive in union 1`] = `
"type Test implements Node {
  id: ID
}
type Test2 {
  tests(orderBy: TestOrder, where: TestWhere, before: String, after: String, first: Int, last: Int): TestConnection!
}
type Query
\\"Sort the results in ascending or descending order\\"
enum OrderDirection {
  \\"Sort the results in ascending order\\"
  ASC
  \\"Sort the results in descending order\\"
  DESC
}
\\"Ordering options for Test\\"
input TestOrder {
  \\"Order Test by id\\"
  id: OrderDirection
}
\\"Query of Test with using operators\\"
input TestWhere {
  \\"Query with using id field\\"
  id: IDWhereOperator
  \\"Query with using id field\\"
  OR: [TestWhere]
}
\\"Query type of ID with using operators\\"
input IDWhereOperator {
  \\"Must match the given data exactly\\"
  eq: ID
  \\"Must be different from the given data\\"
  not_eq: ID
  \\"Must be an element of the array\\"
  in: [ID]
  \\"Must not be an element of the array\\"
  not_in: [ID]
  \\"Must be less than given value\\"
  lt: ID
  \\"Must be less than or equal to given value\\"
  lte: ID
  \\"Must be greater than given value\\"
  gt: ID
  \\"Must be greater than or equal to given value\\"
  gte: ID
  \\"Must be within the given range\\"
  between: [ID]
}
\\"An object with an ID.\\"
interface Node {
  \\"ID of the object.\\"
  id: ID!
}
\\"An edge in a connection.\\"
interface Edge {
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"A connection for relay\\"
interface Connection {
  \\"Identifies the total count of items in the connection.\\"
  totalCount: Int
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
  \\"A list of edges.\\"
  edges: [Edge]
}
\\"Information about pagination in a connection.\\"
type PageInfo {
  \\"When paginating backwards, the cursor to continue.\\"
  startCursor: String
  \\"When paginating forwards, the cursor to continue.\\"
  endCursor: String
  \\"When paginating forwards, are there more items?\\"
  hasNextPage: Boolean
  \\"When paginating backwards, are there more items?\\"
  hasPreviousPage: Boolean
}
\\"An edge in a TestConnection.\\"
type TestEdge implements Edge {
  \\"The item at the end of the edge.\\"
  node: Test!
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"The connection type for Test\\"
type TestConnection implements Connection {
  \\"Identifies the total count of Test items in the connection.\\"
  totalCount: Int
  \\"A list of TestEdge.\\"
  edges: [TestEdge]
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
}

"
`;

exports[`mergeTypes should work relay directive 1`] = `
"type Test implements Node {
  id: ID
}
type Test2 {
  tests(before: String, after: String, first: Int, last: Int): TestConnection!
}
type Query
\\"An object with an ID.\\"
interface Node {
  \\"ID of the object.\\"
  id: ID!
}
\\"An edge in a connection.\\"
interface Edge {
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"A connection for relay\\"
interface Connection {
  \\"Identifies the total count of items in the connection.\\"
  totalCount: Int
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
  \\"A list of edges.\\"
  edges: [Edge]
}
\\"Information about pagination in a connection.\\"
type PageInfo {
  \\"When paginating backwards, the cursor to continue.\\"
  startCursor: String
  \\"When paginating forwards, the cursor to continue.\\"
  endCursor: String
  \\"When paginating forwards, are there more items?\\"
  hasNextPage: Boolean
  \\"When paginating backwards, are there more items?\\"
  hasPreviousPage: Boolean
}
\\"An edge in a TestConnection.\\"
type TestEdge implements Edge {
  \\"The item at the end of the edge.\\"
  node: Test!
  \\"A cursor for use in pagination.\\"
  cursor: String
}
\\"The connection type for Test\\"
type TestConnection implements Connection {
  \\"Identifies the total count of Test items in the connection.\\"
  totalCount: Int
  \\"A list of TestEdge.\\"
  edges: [TestEdge]
  \\"Information to aid in pagination.\\"
  pageInfo: PageInfo!
}

"
`;

exports[`mergeTypes should work where directive 1`] = `
"type Test {
  id: ID
}
type Test2 {
  tests(where: TestWhere): [Test]
}
type Query
\\"Query of Test with using operators\\"
input TestWhere {
  \\"Query with using id field\\"
  id: IDWhereOperator
  \\"Query with using id field\\"
  OR: [TestWhere]
}
\\"Query type of ID with using operators\\"
input IDWhereOperator {
  \\"Must match the given data exactly\\"
  eq: ID
  \\"Must be different from the given data\\"
  not_eq: ID
  \\"Must be an element of the array\\"
  in: [ID]
  \\"Must not be an element of the array\\"
  not_in: [ID]
  \\"Must be less than given value\\"
  lt: ID
  \\"Must be less than or equal to given value\\"
  lte: ID
  \\"Must be greater than given value\\"
  gt: ID
  \\"Must be greater than or equal to given value\\"
  gte: ID
  \\"Must be within the given range\\"
  between: [ID]
}

"
`;
